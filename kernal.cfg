MEMORY {
	zp1:         start = $0000, size = $00FF;
	zp2:         start = $0090, size = $00FF;
	tmpstack:    start = $00ff, size = $00FF;
	buffer:      start = $0200, size = $00FF;
	vars:        start = $02FE, size = $0500;
	params1:     start = $02CC, size = $0100;
	params2:     start = $02CC, size = $0100;
	params3:     start = $02CC, size = $0100;
	params4:     start = $02CC, size = $0100;
	parend:      start = $02E4, size = $0100;

	# lokernal is the part below the charset (and above the BASIC overflow area)
	lokernal:    start = $ce00, size = $0200, fill = yes, fillval = $ff, file = "lokernal.bin";

	# hikernal is the main part
	editor:      start = $D800, size = $0953, fill = yes, fillval = $ff, file = "hikernal.bin";
	serial:      start = $E153, size = $01C6, fill = yes, fillval = $ff, file = "hikernal.bin";
	tape:        start = $E319, size = $0742, fill = yes, fillval = $ff, file = "hikernal.bin";
	rs232:       start = $EA5B, size = $00FD, fill = yes, fillval = $ff, file = "hikernal.bin";
	io:          start = $EB58, size = $074C, fill = yes, fillval = $ff, file = "hikernal.bin";
	init:        start = $F2A4, size = $01A1, fill = yes, fillval = $ff, file = "hikernal.bin";
	monitor:     start = $F445, size = $07D9, fill = yes, fillval = $ff, file = "hikernal.bin";
	banking:     start = $FC1E, size = $00D3, fill = yes, fillval = $ff, file = "hikernal.bin";
	bankvectors: start = $fcf1, size = $000f, fill = yes, fillval = $ff, file = "hikernal.bin";

	# the I/O area can't be used for ROM
	ioarea:      start = $fd00, size = $0240, fill = yes, fillval = $00, file = "hikernal.bin";

	empty:       start = $ff40, size = $000c, fill = yes, fillval = $ff, file = "hikernal.bin";
	basvectors:  start = $ff4c, size = $0034, fill = yes, fillval = $ff, file = "hikernal.bin";
	vectors:     start = $ff80, size = $0080, fill = yes, fillval = $ff, file = "hikernal.bin";
}

SEGMENTS {
	zp1:         load = zp1, type = zp;
	zp2:         load = zp2, type = zp;
	tmpstack:    load = tmpstack;
	buffer:      load = buffer;
	vars:        load = vars;
	params1:     load = params1;
	params2:     load = params2;
	params3:     load = params3;
	params4:     load = params4;
	parend:      load = parend;

	lokernal:    load = lokernal, type = ro;
	editor:      load = editor, type = ro;
	serial:      load = serial, type = ro;
	tape:        load = tape, type = ro;
	rs232:       load = rs232, type = ro;
	io:          load = io, type = ro;
	init:        load = init, type = ro;
	monitor:     load = monitor, type = ro;
	banking:     load = banking, type = ro;
	bankvectors: load = bankvectors, type = ro;
	basvectors:  load = basvectors, type = ro;
	vectors:     load = vectors, type = ro;
}
